#include<stdio.h>
void duplicate(int arr[],int l)
{
    int i;
    for(i=0;i<l;i++)
    {
        arr[arr[i]%l]=arr[arr[i]%l]+l;
    }
    for(i=0;i<l;i++)
    {
        if(arr[i]>=l*2)
        printf("%d\n",i);
    }
}
int main()
{
    int arr[]={1,2,3,3,5,6,7,8,9,1,1,1,1,3,3,3,7};
    int l=sizeof(arr)/sizeof(arr[0]);
    void (*fptr)(int [],int);
    fptr=duplicate;
    fptr(arr,l);
}
output:
1
3
7


2. print union of 2 arrays:
#include<stdio.h>
void arr(int arr1[], int arr2[], int m, int n)
{
    int i = 0, j = 0;
    while (i < m && j < n) 
    {
        if (arr1[i] < arr2[j])
            printf(" %d ", arr1[i++]);
        else if (arr2[j] < arr1[i])
            printf(" %d ", arr2[j++]);
        else {
            printf(" %d ", arr2[j++]);
            i++;
        }
    }
    while (i < m)
        printf(" %d ", arr1[i++]);
    while (j < n)
        printf(" %d ", arr2[j++]);
}
int main()
{
    int arr1[] = { 1, 2, 4, 5, 6 };
    int arr2[] = { 2, 3, 5, 7 };
    int m = sizeof(arr1) / sizeof(arr1[0]);
    int n = sizeof(arr2) / sizeof(arr2[0]);
    void (*fptr)(int[],int[],int,int);
    fptr=arr;
    fptr(arr1, arr2, m, n);
    return 0;
}
output:
1  2  3  4  5  6  7 
